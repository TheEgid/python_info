import logging
import os
from typing import List, Tuple

from llama_index.core import Document, SimpleDirectoryReader, StorageContext, VectorStoreIndex
from llama_index.core.embeddings import BaseEmbedding
from llama_index.core.node_parser import SentenceSplitter
from llama_index.vector_stores.supabase import SupabaseVectorStore
from supabase import create_client

from others.frida import get_frida_embeddings

logger = logging.getLogger(__name__)


class FRIDAEmbedding(BaseEmbedding):
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è LlamaIndex, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FRIDA –ª–æ–∫–∞–ª—å–Ω–æ."""

    def __init__(self, batch_size: int = 32, device: str = "cpu") -> None:
        self.batch_size = batch_size
        self.device = device

    def _get_nodes_embedding(self, texts: List[str]) -> List[List[float]]:
        # texts ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤
        embs = get_frida_embeddings(texts, batch_size=self.batch_size, device=self.device)
        return embs.tolist()


class VectorStoreFRIDA:
    """
    FRIDA + LlamaIndex + Supabase –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∏ –≤—Å—Ç–∞–≤–∫–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏.
    """

    def __init__(self, table_name: str = "test_novaya") -> None:
        supabase_url = os.getenv("SUPABASE_URL")
        supabase_key = os.getenv("SUPABASE_KEY")
        supabase_postgres_url = os.getenv("SUPABASE_POSTGRES_URL")

        if not supabase_url or not supabase_key or not supabase_postgres_url:
            raise EnvironmentError("‚ùå SUPABASE_URL, SUPABASE_KEY –∏ SUPABASE_POSTGRES_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env")

        self.client = create_client(supabase_url, supabase_key)
        self.table_name = table_name

        vector_store = SupabaseVectorStore(
            postgres_connection_string=supabase_postgres_url,
            collection_name=table_name,
        )

        self.storage_context = StorageContext.from_defaults(vector_store=vector_store)
        self.embed_model = FRIDAEmbedding(batch_size=32, device="cpu")
        self.vector_store = vector_store

        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω VectorStoreFRIDA (—Ç–∞–±–ª–∏—Ü–∞: {table_name})")

    # ----------------------------------------------------------------------

    def load_documents(self, directory: str) -> List[Document]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ LlamaIndex SimpleDirectoryReader."""
        docs = SimpleDirectoryReader(input_dir=directory).load_data()
        if not docs:
            raise FileNotFoundError(f"–ü–∞–ø–∫–∞ '{directory}' –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        logger.info(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        return docs

    # ----------------------------------------------------------------------

    def index_directory(
        self,
        directory: str,
        chunk_size: int = 1024,
        chunk_overlap: int = 64,
        batch_size: int = 32,
    ) -> Tuple[int, int]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç, —Ä–∞–∑–±–∏–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–ª—É—á–∞–µ—Ç FRIDA-—ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—ë –≤ Supabase —á–µ—Ä–µ–∑ LlamaIndex.
        """
        docs = self.load_documents(directory)
        splitter = SentenceSplitter(chunk_size=chunk_size, chunk_overlap=chunk_overlap)

        # —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –Ω–æ–¥—ã
        nodes = splitter.get_nodes_from_documents(docs)
        logger.info(f"‚úÇÔ∏è –†–∞–∑–±–∏—Ç–æ –Ω–∞ {len(nodes)} —á–∞–Ω–∫–æ–≤")

        # –ø–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —á–µ—Ä–µ–∑ FRIDA
        texts = [n.get_content() for n in nodes]
        embeddings = get_frida_embeddings(texts, batch_size=batch_size, device="cpu")

        for node, emb in zip(nodes, embeddings, strict=False):
            node.embedding = emb.tolist()

        # —Å–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ VectorStoreIndex —Å FRIDA
        VectorStoreIndex(
            nodes,
            storage_context=self.storage_context,
            embed_model=self.embed_model,
            show_progress=True,
        )

        logger.info(f"‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±–∞–≤–ª–µ–Ω–æ {len(nodes)} –∑–∞–ø–∏—Å–µ–π.")
        return len(nodes), 0  # –¥–æ–±–∞–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—â–µ–Ω–æ

    # ----------------------------------------------------------------------

    def query(self, text: str, top_k: int = 5) -> List[dict]:
        """–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Å—Ç–æ–º–Ω–æ–º—É FRIDA-—ç–º–±–µ–¥–¥–∏–Ω–≥—É —á–µ—Ä–µ–∑ VectorStore."""
        emb = get_frida_embeddings([text])[0]
        results = self.vector_store.query(query_embedding=emb.tolist(), top_k=top_k)
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
        return results

    # ----------------------------------------------------------------------

    def stats(self) -> int:
        """–ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü—ã Supabase (–∫–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π)."""
        response = self.client.table(self.table_name).select("id", count="exact").execute()
        return getattr(response, "count", 0)
