import logging
import os
import sys
import textwrap

import numpy as np
from dotenv import load_dotenv
from llama_index.core import Settings, VectorStoreIndex
from llama_index.core.response_synthesizers import ResponseMode
from llama_index.llms.openrouter import OpenRouter

from others.frida import FridaEmbedding
from others.lance_dataset import load_or_fill_lance

logging.basicConfig(level=logging.INFO)
load_dotenv()


def main() -> None:
    try:
        api_key = os.getenv("OPENROUTER_API_KEY")
        if not api_key:
            logging.error("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            return

        vector_store, nodes = load_or_fill_lance()

        test_embedding = vector_store._compute_query_embedding("test")
        logging.info(f"Embedding shape: {test_embedding.shape}")
        logging.info(f"Embedding norm: {np.linalg.norm(test_embedding)}")  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å ~1.0

        if vector_store is None:
            logging.error("‚ùå –í–µ–∫—Ç–æ—Ä–Ω—ã–π store –Ω–µ —Å–æ–∑–¥–∞–Ω, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
            return

        llm = OpenRouter(
            model="z-ai/glm-4.5-air:free",
            max_tokens=3000,
            temperature=0.3,
            api_key=api_key,
            context_window=4096,
        )
        embed_model = FridaEmbedding()

        Settings.embed_model = embed_model
        Settings.llm = llm

        index = VectorStoreIndex.from_vector_store(vector_store, embed_model=embed_model)

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        query_engine = index.as_query_engine(
            similarity_top_k=3,
            response_mode=ResponseMode.SIMPLE_SUMMARIZE,
            streaming=False,
        )

        response = query_engine.query("–ö–∞–∫–∞—è —Ä—ã–±–∞ –ø–ª–∞–≤–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ—Ö?")
        response_text = str(response).strip()
        wrapped_text = textwrap.fill(response_text, width=120)

        print("\n" + "=" * 50)
        print("–û–¢–í–ï–¢:")
        print("=" * 50)
        print(wrapped_text)
        print("=" * 50)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞:")
        print(f"   –û–±—â–∞—è –¥–ª–∏–Ω–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {wrapped_text.count(chr(10)) + 1}")

    except KeyboardInterrupt:
        logging.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")


if __name__ == "__main__":
    main()
