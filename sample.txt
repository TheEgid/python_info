-- Добавить новую колонку для хешей
ALTER TABLE public.test_novaya
ADD COLUMN content_hash text UNIQUE DEFAULT NULL;

-- Создать индекс для быстрого поиска
CREATE INDEX IF NOT EXISTS test_novaya_content_hash_idx
ON public.test_novaya(content_hash);

-- Если нужно создать всё заново:
DROP TABLE IF EXISTS public.test_novaya CASCADE;

CREATE TABLE public.test_novaya (
  id bigserial PRIMARY KEY,
  content text NOT NULL,
  content_hash text UNIQUE,
  metadata jsonb,
  embedding vector(1536),
  created_at timestamptz DEFAULT now()
);

-- Индекс для поиска по эмбеддингам
CREATE INDEX IF NOT EXISTS test_novaya_embedding_idx
ON public.test_novaya USING ivfflat (embedding vector_cosine_ops)
WITH (lists = 100);

-- Индекс для поиска дубликатов
CREATE INDEX IF NOT EXISTS test_novaya_content_hash_idx
ON public.test_novaya(content_hash);

DROP FUNCTION IF EXISTS match_documents_test_novaya;

CREATE OR REPLACE FUNCTION match_documents_test_novaya(
  query_embedding vector(1536),
  match_threshold float DEFAULT 0.3,
  match_count int DEFAULT 5
)
RETURNS TABLE (
  id bigint,
  content text,
  metadata jsonb,
  similarity float
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT
    test_novaya.id,
    test_novaya.content,
    test_novaya.metadata,
    1 - (test_novaya.embedding <#> query_embedding) AS similarity
  FROM test_novaya
  WHERE 1 - (test_novaya.embedding <#> query_embedding) > match_threshold
  ORDER BY test_novaya.embedding <=> query_embedding
  LIMIT match_count;
END;
$$;
